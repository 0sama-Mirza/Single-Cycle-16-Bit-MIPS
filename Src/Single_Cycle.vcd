$date
	Sun May 26 20:21:19 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Single_Cycle_Top_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module Single_Cycle_Top $end
$var wire 2 # ALUOp_Out [1:0] $end
$var wire 1 $ ALUSrc_Out $end
$var wire 1 % MemRead_Out $end
$var wire 1 & MemToReg_Out $end
$var wire 1 ' MemWrite_Out $end
$var wire 1 ( RegDst_Out $end
$var wire 1 ) Reg_Write_Out $end
$var wire 1 ! clk $end
$var wire 1 * clk_out $end
$var wire 1 " rst $end
$var wire 1 + rst_out $end
$var wire 3 , random [2:0] $end
$var wire 1 - alu_Zero_Out $end
$var wire 1 . alu_Negative_Out $end
$var wire 1 / alu_Carry_Out $end
$var wire 16 0 SignExt_Top [15:0] $end
$var wire 3 1 Register_Address_Write [2:0] $end
$var wire 1 2 RegWrite $end
$var wire 1 3 RegDst $end
$var wire 16 4 ReadData [15:0] $end
$var wire 16 5 RD_Instr [15:0] $end
$var wire 16 6 RD2_Top [15:0] $end
$var wire 16 7 RD1_Top [15:0] $end
$var wire 16 8 PC_Top [15:0] $end
$var wire 16 9 NEW_PC [15:0] $end
$var wire 16 : Mux_Register_To_ALU_Result [15:0] $end
$var wire 16 ; Mux_Data_Memory_To_Register_File_Write_Back_Result [15:0] $end
$var wire 1 < MemWrite $end
$var wire 1 = MemToReg $end
$var wire 1 > MemRead $end
$var wire 1 ? Jump_EN $end
$var wire 16 @ Jump_Adrr_Or_New_PC [15:0] $end
$var wire 16 A ALU_RESULT [15:0] $end
$var wire 1 B ALUSrc $end
$var wire 2 C ALUOp [1:0] $end
$var wire 3 D ALUControl_Top [2:0] $end
$scope module ALU $end
$var wire 1 / Carry $end
$var wire 16 E Result [15:0] $end
$var wire 16 F a_and_b [15:0] $end
$var wire 16 G a_or_b [15:0] $end
$var wire 16 H not_b [15:0] $end
$var wire 16 I sum [15:0] $end
$var wire 16 J mux_2 [15:0] $end
$var wire 16 K mux_1 [15:0] $end
$var wire 1 L cout $end
$var wire 1 - Zero $end
$var wire 1 . Negative $end
$var wire 16 M B [15:0] $end
$var wire 3 N ALUControl [2:0] $end
$var wire 16 O A [15:0] $end
$upscope $end
$scope module ALU_Control $end
$var wire 4 P Fun [3:0] $end
$var wire 2 Q alu_op [1:0] $end
$var wire 6 R ALUControlIn [5:0] $end
$var wire 3 S ALUControl [2:0] $end
$upscope $end
$scope module Control_Unit $end
$var wire 3 T op [2:0] $end
$var wire 1 2 RegWrite $end
$var wire 1 3 RegDst $end
$var wire 1 < MemWrite $end
$var wire 1 = MemToReg $end
$var wire 1 > MemRead $end
$var wire 1 ? Jump_EN $end
$var wire 1 B ALUSrc $end
$var wire 2 U ALUOp [1:0] $end
$upscope $end
$scope module Data_Memory $end
$var wire 16 V A [15:0] $end
$var wire 1 > RE $end
$var wire 1 < WE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 16 W WD [15:0] $end
$var wire 16 X RD [15:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 1 " rst $end
$var wire 16 Y RD [15:0] $end
$var wire 16 Z A [15:0] $end
$upscope $end
$scope module Mux_Data_Memory_To_Register_File_Write_Back $end
$var wire 16 [ In1 [15:0] $end
$var wire 16 \ In2 [15:0] $end
$var wire 1 = Selection $end
$var wire 16 ] Out [15:0] $end
$upscope $end
$scope module Mux_PC_Jump $end
$var wire 16 ^ In2 [15:0] $end
$var wire 1 ? Selection $end
$var wire 16 _ Out [15:0] $end
$var wire 16 ` In1 [15:0] $end
$upscope $end
$scope module Mux_RF_I_OR_R $end
$var wire 3 a In1 [2:0] $end
$var wire 3 b In2 [2:0] $end
$var wire 1 c Sel $end
$var wire 3 d Address_Out [2:0] $end
$upscope $end
$scope module Mux_Register_To_ALU $end
$var wire 1 B Selection $end
$var wire 16 e Out [15:0] $end
$var wire 16 f In2 [15:0] $end
$var wire 16 g In1 [15:0] $end
$upscope $end
$scope module PC $end
$var wire 16 h PC_NEXT [15:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 16 i pc [15:0] $end
$upscope $end
$scope module PC_Adder $end
$var wire 16 j Four16Bit [15:0] $end
$var wire 16 k OLD_PC [15:0] $end
$var wire 16 l NEW_PC [15:0] $end
$upscope $end
$scope module Register_File $end
$var wire 3 m A1 [2:0] $end
$var wire 3 n A2 [2:0] $end
$var wire 3 o A3 [2:0] $end
$var wire 16 p WD3 [15:0] $end
$var wire 1 2 WE3 $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 16 q RD2 [15:0] $end
$var wire 16 r RD1 [15:0] $end
$upscope $end
$scope module Sign_Extend $end
$var wire 16 s In_Str [15:0] $end
$var wire 16 t Extended_Out [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
bx l
bx k
b100 j
bx i
bx h
b0 g
b0 f
b0 e
b0 d
0c
b0 b
b0 a
bx `
bx _
b0 ^
b0 ]
b0 \
b0 [
bx Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
0L
b0 K
b0 J
b0 I
b1111111111111111 H
b0 G
b0 F
b0 E
b0 D
b0 C
0B
b0 A
bx @
0?
0>
0=
0<
b0 ;
b0 :
bx 9
bx 8
b0 7
b0 6
b0 5
b0 4
13
12
b0 1
b0 0
0/
0.
1-
b0 ,
0+
0*
z)
1(
0'
0&
0%
0$
b0 #
0"
0!
$end
#100
b100 @
b100 _
b100 h
b100 9
b100 `
b100 l
b0 8
b0 Z
b0 i
b0 k
1*
1!
#150
0-
0.
b100 ;
b100 ]
b100 p
b100 A
b100 E
b100 V
b100 [
b100 J
0/
b100 I
0L
1c
b100 K
b1111111111111011 H
b100 G
b100 :
b100 M
b100 e
1$
1B
b110000 R
b11 #
b11 C
b11 Q
b11 U
b100 0
b100 f
b100 t
bx 6
bx W
bx g
bx q
b100 1
b100 d
b100 o
0(
03
b100 n
b100 b
b100 a
b100 T
b100100000 ^
b100 ,
b100100000100 5
b100100000100 Y
b100100000100 s
1+
1"
#200
0*
0!
#300
0.
b101 1
b101 d
b101 o
b1010 ;
b1010 ]
b1010 p
0c
b100 K
b1111111111111011 H
b1010 A
b1010 E
b1010 V
b1010 [
b1010 J
b100 :
b100 M
b100 e
b1010 I
b110 G
b100 F
12
0$
0B
b0 R
b0 #
b0 C
b0 Q
b0 U
b1111111110000101 0
b1111111110000101 f
b1111111110000101 t
b110 7
b110 O
b110 r
1(
13
b110 m
b101 a
b0 T
b101100110 ^
b101100110000 5
b101100110000 Y
b101100110000 s
b1000 @
b1000 _
b1000 h
b100 6
b100 W
b100 g
b100 q
b1000 9
b1000 `
b1000 l
b100 8
b100 Z
b100 i
b100 k
1*
1!
#400
0*
0!
#500
1.
b1111111111111111 ;
b1111111111111111 ]
b1111111111111111 p
b1111111111111100 K
b1111111111111100 H
b11 G
b1111111111111111 A
b1111111111111111 E
b1111111111111111 V
b1111111111111111 [
b1111111111111111 J
b11 :
b11 M
b11 e
b1111111111111111 I
b10 F
b1 D
b1 N
b1 S
b1111111110001001 0
b1111111110001001 f
b1111111110001001 t
b11 6
b11 W
b11 g
b11 q
b10 7
b10 O
b10 r
b1 1
b1 d
b1 o
b11 n
b10 m
b11 b
b1 a
b1 R
b1 P
b1001011010 ^
b11 ,
b1001011010000 5
b1001011010000 Y
b1001011010000 s
b1100 @
b1100 _
b1100 h
b1100 9
b1100 `
b1100 l
b1000 8
b1000 Z
b1000 i
b1000 k
1*
1!
#600
0*
0!
#700
0.
b10 ;
b10 ]
b10 p
b10 A
b10 E
b10 V
b10 [
b10 J
b101 I
b11 K
b10 D
b10 N
b10 S
b1111111110010001 0
b1111111110010001 f
b1111111110010001 t
b10 R
b10 P
b10001011010 ^
b10001011010000 5
b10001011010000 Y
b10001011010000 s
b10000 @
b10000 _
b10000 h
b10000 9
b10000 `
b10000 l
b1100 8
b1100 Z
b1100 i
b1100 k
1*
1!
#800
0*
0!
#900
b11 ;
b11 ]
b11 p
b11 A
b11 E
b11 V
b11 [
b11 J
b1111111111111111 I
b1111111111111100 K
b11 D
b11 N
b11 S
b1111111110011001 0
b1111111110011001 f
b1111111110011001 t
b11 R
b11 P
b11001011010 ^
b11001011010000 5
b11001011010000 Y
b11001011010000 s
b10100 @
b10100 _
b10100 h
b10100 9
b10100 `
b10100 l
b10000 8
b10000 Z
b10000 i
b10000 k
1*
1!
#1000
0*
0!
#1100
b1010 ;
b1010 ]
b1010 p
b1010 A
b1010 E
b1010 V
b1010 [
b1010 J
b100 K
b1111111111111011 H
b100 F
b100 :
b100 M
b100 e
b1010 I
0L
b110 G
b0 D
b0 N
b0 S
b1111111110000101 0
b1111111110000101 f
b1111111110000101 t
b100 6
b100 W
b100 g
b100 q
b110 7
b110 O
b110 r
b101 1
b101 d
b101 o
b100 n
b110 m
b100 b
b101 a
b0 R
b0 P
b101100110 ^
b100 ,
b101100110000 5
b101100110000 Y
b101100110000 s
b11000 @
b11000 _
b11000 h
b11000 9
b11000 `
b11000 l
b10100 8
b10100 Z
b10100 i
b10100 k
1*
1!
#1200
0*
0!
#1300
1-
b0 ;
b0 ]
b0 p
b0 K
b1111111111111111 H
b0 A
b0 E
b0 V
b0 [
b0 J
02
1$
1B
b110000 R
b11 #
b11 C
b11 Q
b11 U
b0 :
b0 M
b0 e
b0 I
b0 G
b0 F
1%
1>
b0 0
b0 f
b0 t
b1010 6
b1010 W
b1010 g
b1010 q
b0 7
b0 O
b0 r
b0 1
b0 d
b0 o
0(
03
1'
1<
b101 n
b0 m
b101 b
b0 a
b10 T
b101000 ^
b101 ,
b101000010 5
b101000010 Y
b101000010 s
b11100 @
b11100 _
b11100 h
b11100 9
b11100 `
b11100 l
b11000 8
b11000 Z
b11000 i
b11000 k
1*
1!
#1400
0*
0!
#1500
0$
0B
b0 R
b0 #
b0 C
b0 Q
b0 U
0%
0>
b0 6
b0 W
b0 g
b0 q
0'
0<
1?
b0 n
b0 b
b11 T
b0 ^
b0 ,
b11 5
b11 Y
b11 s
b0 @
b0 _
b0 h
b100000 9
b100000 `
b100000 l
b11100 8
b11100 Z
b11100 i
b11100 k
1*
1!
#1600
0*
0!
